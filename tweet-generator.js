const fs = require("fs");
const path = require("path");
const { GoogleGenAI } = require("@google/genai");
const axios = require("axios");
require("dotenv").config();

// Initialize Gemini AI
const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });

// Get current trending topics (without needing browser automation)
async function getTrendingTopics() {
  try {
    // Using public APIs is unreliable without auth, so we'll use fallback topics
    const fallbackTopics = [
      "Technology",
      "Web Development",
      "JavaScript",
      "Artificial Intelligence",
      "Machine Learning",
      "React",
      "Node.js",
      "Python",
      "Cloud Computing",
    ];

    return fallbackTopics;
  } catch (err) {
    console.log("Could not fetch trends, using defaults");
    return [
      "Technology",
      "Web Development",
      "JavaScript",
      "Artificial Intelligence",
      "Machine Learning",
    ];
  }
}

// Generate tweet based on trends
async function generateTweet(topics) {
  try {
    // Select a random topic from the list
    const randomIndex = Math.floor(Math.random() * topics.length);
    const chosenTopic = topics[randomIndex];

    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash",
      contents: `Generate an engaging, conversational tweet about ${chosenTopic}, focusing on current trends in either technology or India.
      
      Make it:
      - Personal and human-like (use "I", ask questions, share opinions)
      - Conversational, as if talking to followers directly
      - Include at least 2-3 relevant hashtags strategically placed
      - Within 260 characters, but use most of the available space
      - Mention current events or recent developments
      - End with a call-to-action inviting people to follow, share thoughts, or connect via hashtags
      - Sound like a real person, not AI-generated
      
      Only output the tweet text, no additional context`,
    });
    console.log("Full response:", response); // Log the entire response structure

    return response.candidates[0].content.parts[0].text.trim();
  } catch (error) {
    console.error("Error generating tweet:", error);
    // Fallback: choose a random topic for the fallback tweet
    const fallbackTopic = topics[Math.floor(Math.random() * topics.length)];
    return `Exploring the latest in ${fallbackTopic} today. Always amazed by the rapid innovations in this field! #${fallbackTopic.replace(
      /\s+/g,
      ""
    )} #TechTrends`;
  }
}

// Save tweet to markdown file
async function saveTweet(tweet) {
  const filePath = path.join(__dirname, "generated-tweets.md");
  const date = new Date().toISOString().replace("T", " ").substring(0, 19);

  let content = "";
  try {
    if (fs.existsSync(filePath)) {
      content = fs.readFileSync(filePath, "utf8");
    } else {
      content =
        "# Generated Tweets\n\nTweets generated by AI for easy posting.\n\n";
    }
  } catch (err) {
    content =
      "# Generated Tweets\n\nTweets generated by AI for easy posting.\n\n";
  }

  // Add new tweet at the top
  const tweetEntry = `## ${date}\n\n${tweet}\n\n[Click to post this tweet](https://twitter.com/intent/tweet?text=${encodeURIComponent(
    tweet
  )})\n\n---\n\n`;
  content = content.replace(
    "# Generated Tweets\n\nTweets generated by AI for easy posting.\n\n",
    `# Generated Tweets\n\nTweets generated by AI for easy posting.\n\n${tweetEntry}`
  );

  fs.writeFileSync(filePath, content);
  console.log("Tweet saved to generated-tweets.md");
}

// Save tweet for Buffer (outputs CSV)
async function saveTweetForBuffer(tweet) {
  const filePath = path.join(__dirname, "buffer-tweets.csv");
  const date = new Date();

  // Schedule for tomorrow at random hour
  date.setDate(date.getDate() + 1);
  date.setHours(Math.floor(Math.random() * 12) + 8); // Random hour between 8am-8pm

  const scheduledTime = date.toISOString();

  // Buffer CSV format: Text, Schedule
  const csvLine = `"${tweet.replace(/"/g, '""')}","${scheduledTime}"\n`;

  // Create or append to CSV file
  if (!fs.existsSync(filePath)) {
    fs.writeFileSync(filePath, "Text,Schedule\n");
  }

  fs.appendFileSync(filePath, csvLine);
  console.log("Tweet saved for Buffer import");
}

// Post to IFTTT if key exists - NOTE: Twitter/X integration no longer available in free tier
async function postToIFTTT(tweet) {
  try {
    // You'll need your IFTTT webhook key
    const webhookKey = process.env.IFTTT_KEY || "";
    const eventName = "new_tweet"; // Your IFTTT event name

    if (!webhookKey) {
      console.log("IFTTT key not found in .env file");
      return;
    }

    console.log(
      "NOTE: IFTTT no longer supports Twitter/X posting in free tier"
    );
    console.log("This webhook may still be useful for other services");

    // Post to IFTTT webhook
    const response = await axios.post(
      `https://maker.ifttt.com/trigger/${eventName}/with/key/${webhookKey}`,
      {
        value1: tweet,
      }
    );

    console.log("Tweet sent to IFTTT webhook");
    return true;
  } catch (error) {
    console.error("Error posting to IFTTT:", error);
    return false;
  }
}

// Post to Make.com webhook - simplified for maximum compatibility
async function postToMake(tweet) {
  try {
    const webhookUrl = process.env.MAKE_WEBHOOK_URL;

    if (!webhookUrl) {
      console.log("Make.com webhook URL not found in .env file");
      return false;
    }

    // Skip posting to Make.com in development environment
    const isDevelopment = process.env.NODE_ENV === "development";
    if (isDevelopment) {
      console.log("DEV MODE: Skipping actual Make.com webhook call");
      console.log("Would have sent this payload:", { text: tweet });
      return true;
    }

    console.log("Sending tweet to Make.com with simplified payload...");

    // Simplified payload - just the tweet text as the main property
    const response = await axios.post(webhookUrl, {
      text: tweet, // Simple key for maximum compatibility
    });

    console.log("Tweet sent to Make.com successfully");
    console.log("Make.com response status:", response.status);
    return true;
  } catch (error) {
    console.error("Error posting to Make.com:", error.message);
    if (error.response) {
      console.error("Response status:", error.response.status);
      console.error("Response data:", error.response.data);
      console.error("Response headers:", error.response.headers);
    }
    return false;
  }
}

// Main function
async function main() {
  const topics = await getTrendingTopics();
  console.log("Topics:", topics);

  const tweet = await generateTweet(topics);
  console.log("Generated tweet:", tweet);

  // Always save locally
  await saveTweet(tweet);
  await saveTweetForBuffer(tweet);

  // Try posting via Make.com if configured
  if (process.env.MAKE_WEBHOOK_URL) {
    // Always attempt to post, but postToMake function will handle dev mode
    await postToMake(tweet);
  }

  // Try optional services if configured
  if (process.env.IFTTT_KEY) {
    console.log("Note: IFTTT no longer supports Twitter/X in free plan");
    await postToIFTTT(tweet);
  }
}

main().catch(console.error);
